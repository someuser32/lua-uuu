local class = require("lib/middleclass")

require("lib/lib")

local hero_script = require("lib/hero_script")
local HeroScript, ScriptAPI = table.unpack(hero_script)

local LoneDruidAddon = class("LoneDruidAddon", HeroScript)

function LoneDruidAddon:initialize()
	self.path = {"Addon"}

	HeroScript.initialize(self, "npc_dota_hero_lone_druid")

	self.trigger_abilities = {
		{"item_blink", "panorama/images/items/blink_png.vtex_c", true},
		{"item_overwhelming_blink", "panorama/images/items/overwhelming_blink_png.vtex_c", true},
		{"item_swift_blink", "panorama/images/items/swift_blink_png.vtex_c", true},
		{"item_arcane_blink", "panorama/images/items/arcane_blink_png.vtex_c", true},
		{"axe_berserkers_call", "panorama/images/spellicons/axe_berserkers_call_png.vtex_c", true},
		{"tidehunter_ravage", "panorama/images/spellicons/tidehunter_ravage_png.vtex_c", true},
		{"enigma_black_hole", "panorama/images/spellicons/enigma_black_hole_png.vtex_c", true},
		{"magnataur_reverse_polarity", "panorama/images/spellicons/magnataur_reverse_polarity_png.vtex_c", true},
		{"legion_commander_duel", "panorama/images/spellicons/legion_commander_duel_png.vtex_c", true},
		{"beastmaster_primal_roar", "panorama/images/spellicons/beastmaster_primal_roar_png.vtex_c", true},
		{"faceless_void_chronosphere", "panorama/images/spellicons/faceless_void_chronosphere_png.vtex_c", true},
		{"batrider_flaming_lasso", "panorama/images/spellicons/batrider_flaming_lasso_png.vtex_c", true},
		{"slardar_slithereen_crush", "panorama/images/spellicons/slardar_slithereen_crush_png.vtex_c", true},
		{"centaur_hoof_stomp", "panorama/images/spellicons/centaur_hoof_stomp_png.vtex_c", true},
		{"bane_fiends_grip", "panorama/images/spellicons/bane_fiends_grip_png.vtex_c", true},
		{"pudge_dismember", "panorama/images/spellicons/pudge_dismember_png.vtex_c", true},
	}

	self:create_option(UI_LIB.create_bool, "auto_true_form", nil, {UI_LIB, table.combine(self.path, {"Auto True Form"}), "Enable", false})

	self:create_option(UI_LIB.create_multiselect, "auto_true_form_abilities", nil, {UI_LIB, table.combine(self.path, {"Auto True Form"}), "Trigger Abilities", self.trigger_abilities, false})

	self:CreateHeroSelectors()

	self:create_option(UI_LIB.create_slider, "auto_true_form_blink_search_radius", "panorama/images/items/blink_png.vtex_c", {UI_LIB, table.combine(self.path, {"Auto True Form"}), "Blink Search Radius", 200, 1000, 500})

	self:create_option(UI_LIB.create_slider, "auto_true_form_phase_cast_delay", "~/MenuIcons/Time/timer_def.png", {UI_LIB, table.combine(self.path, {"Auto True Form"}), "Animation Cast Delay", 0, 99, 85})

	UI_LIB:set_tab_icon(self.actual_path, "~/MenuIcons/utils_wheel.png")
	UI_LIB:set_tab_icon(table.combine(self.actual_path, "Auto True Form"), "panorama/images/spellicons/lone_druid_true_form_png.vtex_c")

	self.listeners = {}

	if self:IsEnabled() then
		self.listeners["AbilityUsageHeroEnemy"] = true
	end
end

function LoneDruidAddon:IsEnabled()
	local original_script = Menu.FindMenu(self.base_path, "Enabled", Enum.MenuType.MENU_TYPE_BOOL)
	return self.auto_true_form:get_value() and (original_script == 0 or Menu.IsEnabled(original_script)) and CHero.GetLocalName() == self.hero_name
end

function LoneDruidAddon:OnGameStart()
	self.HeroScript.OnGameStart(self)
	self:CreateHeroSelectors()
end

function LoneDruidAddon:OnGameEnd()
	self.HeroScript.OnGameEnd(self)
	self:CreateHeroSelectors()
end

function LoneDruidAddon:CreateHeroSelectors()
	self:remove_option("auto_true_form_enemies_selector")
	self:create_option(UI_LIB.create_enemymultiselect, "auto_true_form_enemies_selector", "panorama/images/items/blink_png.vtex_c", {UI_LIB, table.combine(self.path, {"Auto True Form"}), "Blink Enemies", false, true, true})
end

function LoneDruidAddon:OnNPCUsedAbility(ability)
	local localHero = CHero.GetLocal()
	local caster = ability:GetCaster()
	local true_form = localHero:GetAbility("lone_druid_true_form")
	if true_form == nil or not true_form:IsCastable(localHero:GetMana()) then return false end
	if self.auto_true_form_abilities:is_selected(ability:GetName()) then
		if ability:IsBlink() then
			if self.auto_true_form_enemies_selector:is_selected(caster:GetUnitName()) and caster:IsEntityInRange(localHero, self.auto_true_form_blink_search_radius:get_value()) then
				if localHero:IsInvisible() and not localHero:IsTrueSight() then return false end
				true_form:CastNoTarget(false, true)
				return true
			end
		end
	end
	return false
end

function LoneDruidAddon:OnNPCPhaseAbility(ability)
	local localHero = CHero.GetLocal()
	local caster = ability:GetCaster()
	local true_form = localHero:GetAbility("lone_druid_true_form")
	if true_form == nil or not true_form:IsCastable(localHero:GetMana()) then return false end
	if table.contains(self.auto_true_form_abilities:get_value(), ability:GetName()) then
		local cast_delay = self.auto_true_form_phase_cast_delay:get_value()
		local delay = cast_delay > 0 and math.max(ability:GetCastPoint()/(100/cast_delay)-GetPingDelay()-true_form:GetCastPoint(), 0) or 0
		if (ability:HasBehavior(Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_POINT) or ability:HasBehavior(Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_NO_TARGET)) and caster:IsEntityInRange(localHero, ability:GetAffectedCastRange()) then
			timer.Simple(delay, function()
				if not ability:IsInAbilityPhase() then return end
				true_form:CastNoTarget(false, true)
			end)
			return true
		elseif ability:HasBehavior(Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_UNIT_TARGET) then
			if not ability:CanCastToPosition(localHero:GetAbsOrigin()) then
				delay = math.max(math.max(delay, caster:GetTurnTimeToNPC(localHero)), ability:GetCastPoint()-GetPingDelay())
			end
			timer.Simple(delay, function()
				if not ability:IsInAbilityPhase() then return end
				if not ability:CanCastToPosition(localHero:GetAbsOrigin()) then return end
				true_form:CastNoTarget(false, true)
			end)
			return true
		end
	end
	return false
end

function LoneDruidAddon:OnMenuOptionChange(option, oldValue, newValue)
	if self:IsEnabled() then
		if CHero.GetLocalName() == self.hero_name then
			self.listeners["AbilityUsageHeroEnemy"] = true
		end
	else
		self.listeners["AbilityUsageHeroEnemy"] = nil
	end
end

ScriptAPI.Init(LoneDruidAddon)

return ScriptAPI